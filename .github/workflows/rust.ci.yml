name: "Rust"

on:
  push:

permissions:
  contents: read
  pull-requests: read

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: "Rust Test: [${{ matrix.arch.short-name }}] [${{ matrix.mode.name }}/${{ matrix.toolchain }}]"
    runs-on: "${{ matrix.arch.os }}-latest"
    strategy:
      matrix:
        arch:
          - { os: ubuntu, target: x86_64-unknown-linux-gnu, short-name: "linux/gnu" }
          - { os: ubuntu, target: x86_64-unknown-linux-musl, short-name: "linux/musl" }
          - { os: windows, target: x86_64-pc-windows-msvc, short-name: "win/msvc" }
          - { os: macos, target: x86_64-apple-darwin, short-name: "mac/x86" }
          - { os: macos, target: aarch64-apple-darwin, short-name: "mac/arm" }
        toolchain:
          - stable
          - beta
          - nightly
        mode:
          - { name: debug, flag: "", dir: "debug" }
          - { name: release, flag: "--release", dir: "release" }
    env:
      PUZZLE_OUT_DIR: target/${{ matrix.arch.target }}/${{ matrix.mode.dir }}
    steps:
      - uses: actions/checkout@v4

      - name: Install
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }} && rustup target add ${{ matrix.arch.target }}

      - name: Build
        run: cargo build --verbose --target ${{ matrix.arch.target }} ${{ matrix.mode.flag }}

      - name: Show Build Files
        run: ls -lahs $PUZZLE_OUT_DIR
        shell: bash
        
      - name: Test
        run: cargo test --verbose ${{ matrix.mode.flag }}
