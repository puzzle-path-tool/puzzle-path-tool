name: "Rust"

on:
  push:

permissions:
  contents: read
  pull-requests: read

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: "Test: [${{ matrix.profile.name }}]"
    runs-on: "${{ matrix.profile.os }}-latest"
    strategy:
      fail-fast: false
      matrix:
        profile:
          - name: "default"
            os: "ubuntu"
            target: "x86_64-unknown-linux-gnu"
            toolchain: "stable"
            flags: "--all-features --release"
            dir: "release"
          
          - name: "arch: linux/musl"
            os: "ubuntu"
            target: "x86_64-unknown-linux-musl"
            toolchain: "stable"
            flags: "--all-features --release"
            dir: "release"

          - name: "arch: linux/arm"
            os: "ubuntu"
            target: "aarch64-unknown-linux-gnu"
            toolchain: "stable"
            flags: "--all-features --release"
            dir: "release"

          - name: "arch: windows"
            os: "windows"
            target: "x86_64-pc-windows-msvc"
            toolchain: "stable"
            flags: "--all-features --release"
            dir: "release"

          - name: "arch: macos/x86"
            os: "macos"
            target: "x86_64-apple-darwin"
            toolchain: "stable"
            flags: "--all-features --release"
            dir: "release"
          
          - name: "arch: macos/arm"
            os: "macos"
            target: "aarch64-apple-darwin"
            toolchain: "stable"
            flags: "--all-features --release"
            dir: "release"

          - name: "profile: debug"
            os: "ubuntu"
            target: "x86_64-unknown-linux-gnu"
            toolchain: "stable"
            flags: "--all-features"
            dir: "debug"

          - name: "toolchain: beta"
            os: "ubuntu"
            target: "x86_64-unknown-linux-gnu"
            toolchain: "beta"
            flags: "--all-features --release"
            dir: "release"

          - name: "toolchain: nightly"
            os: "ubuntu"
            target: "x86_64-unknown-linux-gnu"
            toolchain: "nightly"
            flags: "--all-features --release"
            dir: "release"

          - name: "features: default"
            os: "ubuntu"
            target: "x86_64-unknown-linux-gnu"
            toolchain: "stable"
            flags: "--release"
            dir: "release"

          - name: "features: none"
            os: "ubuntu"
            target: "x86_64-unknown-linux-gnu"
            toolchain: "stable"
            flags: "--no-default-features --release"
            dir: "release"

    env:
      PUZZLE_OUT_DIR: target/${{ matrix.profile.target }}/${{ matrix.profile.dir }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Build
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.profile.target }}
          toolchain: ${{ matrix.profile.toolchain }}
          args: "--locked ${{ matrix.profile.flags }}"

      - name: Show Build Files
        run: ls -lahs $PUZZLE_OUT_DIR

      - name: Test
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: test
          target: ${{ matrix.profile.target }}
          toolchain: ${{ matrix.profile.toolchain }}
          args: "--locked ${{ matrix.profile.flags }}"
  clippy:
    name: "Clippy"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install
        run: >
          rustup update stable
          && rustup default stable
          && rustup component add clippy

      - name: Run Clippy
        run: |
          cargo clippy --workspace --all-targets --all-features --color=always 2> >(tee -a clippy_output.txt)
          sed -e 's/\x1b\[[0-9;]*m//g' clippy_output.txt > clippy_output_raw.txt

          if grep -q -F "warning: " clippy_output_raw.txt; then
            echo "Clippy warnings found. Failing the job."
            exit 1
          else
            echo "No Clippy warnings found."
          fi

  format:
    name: "Format"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install
        run: >
          rustup update stable
          && rustup default stable
          && rustup component add rustfmt

      - name: Run Format
        run: cargo fmt --all --check
  deny:
    name: "Deny"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install
        run: >
          rustup update stable
          && rustup default stable
          && cargo install cargo-deny

      - name: Run Deny
        run: cargo deny check
