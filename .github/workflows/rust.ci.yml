name: "Rust"

on:
  push:

permissions:
  contents: read
  pull-requests: read

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: "Test: [${{ matrix.arch.short-name }}] [${{ matrix.mode.short-name }}/${{ matrix.toolchain.short-name }}]"
    runs-on: "${{ matrix.arch.os }}-latest"
    strategy:
      fail-fast: false
      matrix:
        arch:
          - os: "ubuntu"
            target: "x86_64-unknown-linux-gnu"
            short-name: "linux/gnu"

          - os: "ubuntu"
            target: "x86_64-unknown-linux-musl"
            short-name: "linux/musl"

          - os: "ubuntu"
            target: "aarch64-unknown-linux-gnu"
            short-name: "linux/arm"

          - os: "windows"
            target: "x86_64-pc-windows-msvc"
            short-name: "win/msvc"

          - os: "macos"
            target: "x86_64-apple-darwin"
            short-name: "mac/x86"

          - os: "macos"
            target: "aarch64-apple-darwin"
            short-name: "mac/arm"

        toolchain:
          - name: "stable"
            short-name: "stb"

          - name: "beta"
            short-name: "beta"

          - name: "nightly"
            short-name: "ngt"

        mode:
          - name: "debug"
            flag: ""
            dir: "debug"
            short-name: "dbg"

          - name: "release"
            flag: "--release"
            dir: "release"
            short-name: "rl"

    env:
      PUZZLE_OUT_DIR: target/${{ matrix.arch.target }}/${{ matrix.mode.dir }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Install
        run: >
          rustup update ${{ matrix.toolchain.name }}
          && rustup default ${{ matrix.toolchain.name }}
          && rustup target add ${{ matrix.arch.target }}

      - name: Install ARM Linker
        if: matrix.arch.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc-11 >> ${GITHUB_ENV}

          # https://github.com/mozilla/cbindgen/blob/master/.github/workflows/cbindgen.yml
          sudo sed -i '/^Components/a Architectures: amd64' /etc/apt/sources.list.d/ubuntu.sources
          echo "deb [arch=arm64] http://ports.ubuntu.com/ $(lsb_release -sc) main multiverse universe" | sudo tee -a /etc/apt/sources.list.d/ports.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ $(lsb_release -sc)-security main multiverse universe" | sudo tee -a  /etc/apt/sources.list.d/ports.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ $(lsb_release -sc)-backports main multiverse universe" | sudo tee -a  /etc/apt/sources.list.d/ports.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ $(lsb_release -sc)-updates main multiverse universe" | sudo tee -a  /etc/apt/sources.list.d/ports.list

          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y qemu-user gcc-11-aarch64-linux-gnu libc6:arm64

      - name: Build
        run: cargo build --verbose --target ${{ matrix.arch.target }} ${{ matrix.mode.flag }}

      - name: Show Build Files
        run: ls -lahs $PUZZLE_OUT_DIR

      - name: Install Nextest
        uses: taiki-e/install-action@nextest

      - name: Test
        run: cargo nextest run --workspace --verbose --all-features --target ${{ matrix.arch.target }} ${{ matrix.mode.flag }}
  clippy:
    name: "Clippy"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install
        run: >
          rustup update stable
          && rustup default stable
          && rustup component add clippy

      - name: Run Clippy
        run: |
          cargo clippy --workspace --all-targets --all-features --color=always 2> >(tee -a clippy_output.txt)
          sed -e 's/\x1b\[[0-9;]*m//g' clippy_output.txt > clippy_output_raw.txt

          if grep -q -F "warning: " clippy_output_raw.txt; then
            echo "Clippy warnings found. Failing the job."
            exit 1
          else
            echo "No Clippy warnings found."
          fi

  format:
    name: "Format"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install
        run: >
          rustup update stable
          && rustup default stable
          && rustup component add rustfmt

      - name: Run Format
        run: cargo fmt --all --check
